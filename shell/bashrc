[[ -z "${PS1}" ]] && return 0

PATH="$HOME/.cargo/bin:${HOME}/.local/bin:${HOME}/bin:${PATH}"

###############################
###        HISTORY          ###
###############################
HISTCONTROL=ignoreboth
HISTSIZE=5000
HISTFILESIZE=10000
shopt -s histappend
alias h='history'
alias hgrep='history | grep'

###############################
###        TERMINAL         ###
###############################
shopt -s checkwinsize

###############################
###          JOBS           ###
###############################
set -o notify

###############################
###      DIRECTORIES        ###
###############################
shopt -s cdable_vars
shopt -s cdspell
alias ..='cd ..'
alias ...='cd ../..'
alias ....='cd ../../..'
alias -- -='cd -'
alias ls='ls --color=auto'
alias ll='ls -l'

###############################
###        COMMANDS         ###
###############################
shopt -s no_empty_cmd_completion
if [[ "$(uname -s)" = CYGWIN_NT* ]]; then
  shopt -s completion_strip_exe
fi

###############################
###         COLORS          ###
###############################
colorize()
{
  local colorname="$1" retformat="$2" code="0"

  case "${colorname}" in
    clear)          code="0"    ;;
    black)          code="0;30" ;;
    red)            code="0;31" ;;
    green)          code="0;32" ;;
    yellow)         code="0;33" ;;
    blue)           code="0;34" ;;
    magenta)        code="0;35" ;;
    cyan)           code="0;36" ;;
    white)          code="0;37" ;;
    bright_black)   code="1;30" ;;
    bright_red)     code="1;31" ;;
    bright_green)   code="1;32" ;;
    bright_yellow)  code="1;33" ;;
    bright_blue)    code="1;34" ;;
    bright_magenta) code="1;35" ;;
    bright_cyan)    code="1;36" ;;
    bright_white)   code="1;37" ;;
    *)              code="0;39" ;;
  esac

  case "${retformat}" in
    'b') echo "${code}"              ;;
    'p') echo "\\[\\033[${code}m\\]" ;;
    's') echo "\\033[${code}m"       ;;
  esac
}

_c() { colorize "$@"; }

###############################
###         EDITORS         ###
###############################
export EDITOR="vim"
export VISUAL="${EDITOR}"

###############################
###       PERMISSIONS       ###
###############################
alias ux='chmod u+x'

###############################
###        SEARCHING        ###
###############################
alias grep='grep --color=auto --extended-regexp'
GREP_COLORS="$(colorize 'bright_green' 'b')"
export GREP_COLORS

###############################
###      PROMPT THEME       ###
###############################
_REGEX_VERSION='([0-9]+\.){2}[0-9]+'

_prompt_color()
{
  local color=$1; shift

  echo "$(_c "${color}" 'p')$*$(_c 'default' 'p')"
}

_prompt_git_branch()
{
  __git_ps1 '%s' | grep '.{,20}'
}

_get_python_exec()
{
  local python_version

  python_version="$(python --version 2>&1 | grep -oE "${_REGEX_VERSION}")"

  if [[ "${python_version}" =~ 2.*.* ]] && command -v python3 > /dev/null; then
    echo "python3"
  else
    echo "python"
  fi
}

_prompt_python_version()
{
  local python_exec="$1"

  if [[ "${python_exec}" == "python3" ]]; then
      python3 --version 2>&1 | grep -oE "${_REGEX_VERSION}"
  else
      python --version 2>&1 | grep -oE "${_REGEX_VERSION}"
  fi
}

_prompt_gcc_version()
{
  if command -v gcc > /dev/null; then
    gcc --version | grep -oE "${_REGEX_VERSION}" | uniq
  fi
}

_prompt_clang_version()
{
  if command -v clang > /dev/null; then
    clang --version | grep -oE "${_REGEX_VERSION}" | uniq
  fi
}

_set_prompt()
{
  local status_code="$?"
  local git_branch python_ver python_venv

  git_branch="$(_prompt_git_branch)"
  python_exec="$(_get_python_exec)"
  python_ver="$(_prompt_python_version "${python_exec}")"
  python_venv="${VIRTUAL_ENV##*/}"
  gcc_ver="$(_prompt_gcc_version)"
  clang_ver="$(_prompt_clang_version)"

  PS1="[ "

  PS1="${PS1}$(_prompt_color bright_white 'git') "
  if [[ -n "${git_branch}" ]]; then
    PS1="${PS1}$(_prompt_color green "${git_branch}") | "
  else
    PS1="${PS1}$(_prompt_color yellow 'N/A') | "
  fi

  if [[ "${python_exec}" == "python3" ]]; then
    PS1="${PS1}$(_prompt_color bright_white 'Python3') "
  else
    PS1="${PS1}$(_prompt_color bright_white 'Python') "
  fi
  PS1="${PS1}$(_prompt_color bright_blue "${python_ver}") "
  if [[ -n "${python_venv}" ]]; then
    PS1="${PS1}$(_prompt_color cyan "${python_venv}") | "
  else
    PS1="${PS1}$(_prompt_color yellow 'system') | "
  fi

  PS1="${PS1}$(_prompt_color bright_white 'GCC') "
  if [[ -n "${gcc_ver}" ]]; then
    PS1="${PS1}$(_prompt_color bright_blue "${gcc_ver}") | "
  else
    PS1="${PS1}$(_prompt_color yellow 'N/A') | "
  fi

  PS1="${PS1}$(_prompt_color bright_white 'clang') "
  if [[ -n "${clang_ver}" ]]; then
    PS1="${PS1}$(_prompt_color bright_blue "${clang_ver}") | "
  else
    PS1="${PS1}$(_prompt_color yellow 'N/A') | "
  fi

  PS1="${PS1}\\w"

  PS1="${PS1} ]\\n"

  PS1="${PS1}${USER}@${HOSTNAME} "

  if [[ "${status_code}" == 0 ]]; then
    PS1="${PS1}$(_prompt_color green "$(printf "\\xe2\\x9c\\x93")") "
  else
    PS1="${PS1}$(_prompt_color red   "$(printf "\\xe2\\x9c\\x97")") "
  fi
}

PROMPT_COMMAND=_set_prompt

export VIRTUAL_ENV_DISABLE_PROMPT=1

###############################
###         SOURCE          ###
###############################

# Make use of bash completion, they are very handy
if [[ -f /etc/bash_completion ]]; then
  source /etc/bash_completion
fi

# Allow some level of customization
if [[ -f ~/.bashrc.extras ]]; then
  # shellcheck source=/dev/null
  source ~/.bashrc.extras
fi

